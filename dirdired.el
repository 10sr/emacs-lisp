;; 他のwindowを食い潰す
;; (when (require 'dirdired nil t) (global-set-key "\C-cd" 'dirdired)) とかする

(setq dired-dwim-target t)
(defvar dirdired-left-dir "./" "dir showed in left dirdired")
(defvar dirdired-right-dir "~/" "dir showed in right dirdired")

(defun dirdired ()
  "double screen dired"
  (interactive)
  (delete-other-windows) ;全画面縛り
  (dired dirdired-left-dir)
  (revert-buffer)
  (select-window (split-window-horizontally))
  (dired dirdired-right-dir)
  (revert-buffer)
  (select-window (previous-window))
  )

(defun dirdired-change-directory ()
  ""
  (interactive)
  (call-interactively 'dired)
  (dirdired-set-dir-var default-directory))

(defun dirdired-set-dir-var (dir)
  "change the value of dirdired-left-dir or dirdired-right-dir when changing dir"
  (cond ((not (window-minibuffer-p (next-window (selected-window) t))) ;左かどうかを次のバッファがミニバッファでないかで調べる
         (setq dirdired-left-dir dir))
        (t
         (setq dirdired-right-dir dir))))

(defun dirdired-find-file ()
  "find-file for dirdired"
  (interactive)
  (let ((file (dired-get-filename nil t)))
    (if (not file)
        (message "not file nor dir.")
      (cond ((file-directory-p file)
             (dired-find-alternate-file)
             (dirdired-set-dir-var file))
            (t
             (delete-other-windows) ;全画面縛り
             (dired-find-alternate-file))))))

(defun dirdired-view-file ()
  ""
  (interactive)
  )

;;(defadvice dired (after dirdired-ad-set-var activate)
;;  (dirdired-set-dir-var default-directory))
(defadvice dired-up-directory (after dirdired-up-dir-set-var activate)
  (dirdired-set-dir-var default-directory))

(add-hook 'dired-mode-hook
          (lambda ()
            (define-key dired-mode-map "\C-m" 'dirdired-find-file)
            (define-key dired-mode-map "\C-i" 'other-window) ;全画面縛り
            (define-key dired-mode-map "\C-d" 'dirdired-change-directory)
            ))

(defun dirdired-save-pref ()
  (let* (buf
         (file "~/.emacs.d/.dirdiredpref.el"))
    (if (get-file-buffer (expand-file-name file))
        (setq buf (get-file-buffer (expand-file-name file)))
      (setq buf (find-file-noselect file)))
    (set-buffer buf)
    (erase-buffer)
    (insert (concat
             ";;; automatically generated by dirdired\n"
             "(setq dirdired-left-dir \"" dirdired-left-dir "\")\n"
             "(setq dirdired-right-dir \"" dirdired-right-dir "\")\n"
             ))
    (save-buffer)
    ))

(defun dirdired-load-pref ()
  (let* ((file "~/.emacs.d/.dirdiredpref.el"))
    (if (file-exists-p file)
        (load file))))

(add-hook 'after-init-hook
          'dirdired-load-pref)

(add-hook 'kill-emacs-hook
          (lambda ()
            (before save-dirdired-pref activate)
            (dirdired-save-pref)))

(provide 'dirdired)
